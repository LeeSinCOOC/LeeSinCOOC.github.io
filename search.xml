<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[5.Python的数字类型]]></title>
    <url>%2Fpython%2F5.Python%E7%9A%84%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B.html</url>
    <content type="text"><![CDATA[书接上文上一篇博客中简单介绍了一下Python的各种变量类型，这一篇我们重点介绍Python的数字类型。数字类型算得上是程序语言的灵魂了，大家都知道计算机通过高低电平的状态，规定高电平为1，低电平为0，用0和1来表示了如此庞大的计算体系。用0和1推演出字符，数字等的表达方式，再用数字，字符组成了如此复杂的程序结构。古老的程序员都是用打孔纸带进行编程，哪有现在这么舒服。作为语言中最重要的一环，数字，不得不首先介绍它，因为没有数字就真的什么都没有了。包括没有在数学的表达上也是0，所以这么世界就是数学，没有数学表达不了的东西。 下面，我们就正式进入数值类型的学习，银行卡余额的数字大家应该还是很关心的。 Python Number(数字)Python Number 数据类型用于存储数值。 数据类型是不允许改变的,这就意味着如果改变 Number 数据类型的值，将重新分配内存空间。 Python 支持三种不同的数值类型： 整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。 浮点型(floating point real values) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 10^2 = 250） 复数(complex numbers) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。 Python Number 类型转换 语法 解释 int(x [,base ]) 将x转换为一个整数 float(x) 将x转换到一个浮点数 complex(real [,imag ]) 创建一个复数 str(x) 将对象 x 转换为字符串 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s) 将序列 s 转换为一个元组 list(s) 将序列 s 转换为一个列表 chr(x) 将一个整数转换为一个字符 unichr(x) 将一个整数转换为Unicode字符 ord(x) 将一个字符转换为它的整数值 hex(x) 将一个整数转换为一个十六进制字符串 oct(x) 将一个整数转换为一个八进制字符串 bin(x) 将一个整数转换为一个二进制字符串 我们选讲 repr , eval , chr , ord , hex , oct , bin123a = b = 1c = repr(a+b)d = str(a + b) 12c , type(c)d , type(d) 12('2', str) ('2', str) a + b 是一个表达式，使用 repr 将其转化为了字符串格式，当然也可以使用 str 进行转换。两者有什么区别呢？ repr和str这两个方法都是用于显示的，str是面向用户的，而repr面向程序员。 打印操作会首先尝试str和str内置函数(print运行的内部等价形式)，它通常应该返回一个友好的显示。 repr用于所有其他的环境中：用于交互模式下提示回应以及repr函数，如果没有使用str，会使用print和str。它通常应该返回一个编码字符串，可以用来重新创建对象，或者给开发者详细的显示。 当我们想所有环境下都统一显示的话，可以重构repr方法；当我们想在不同环境下支持不同的显示，例如终端用户显示使用str，而程序员在开发期间则使用底层的repr来显示，实际上str只是覆盖了repr以得到更友好的用户显示。 大概了解一下，不懂没关系。等学完整个课程再来理解就好。 下面的事例为未来王者归来的你所写，提前面个眼缘就行。 12345678910# -*- coding: utf-8 -*-class Test(object): def __init__(self,value='hello world'): self.data = valuet = Test()print(t)&lt;__main__.Test object at 0x00000249BD7180F0&gt; 上面打印类对象并不是很友好，显示的是对象的内存地址 下面我们重构下该类的repr以及str，看看它们俩有啥区别 12345678910111213141516171819202122# -*- coding: utf-8 -*-class Test(object): def __init__(self,value='hello world'): self.data = valuet = Test()print(t)class Test_Repr(Test): def __repr__(self): return 'Repr:&#123;&#125;'.format(self.data) class Test_Str(Test): def __str__(self): return 'Str:&#123;&#125;'.format(self.data)tr = Test_Repr()print(tr)ts = Test_Str()print(ts) 1234567891011121314&lt;__main__.Test object at 0x00000249BD718BA8&gt;Repr:hello worldStr:hello world#似乎后面两个还是一样的？#这里就要用交互环境了In[]:tOut[]: &lt;__main__.Test at 0x249bd718ba8&gt;In[]:trOut[]: Repr:hello worldIn[]:tsOut[10]: &lt;__main__.Test_Str at 0x249bd718860&gt; 相信你一定很好奇后面那一长串的16进制数是什么玩意，它就是变量的存储在内存中的内存地址，查看任何变量的内存地址都可以使用 id 来看 123456id(t)Out[11]: 2515734203304ps：好像是十进制和上面显示的不一样呃，还记得用什么转16进制吗？ 既然这里用到了，那就不说了hex(id(t))Out[12]: '0x249bd718ba8' eval 将字符串转为Python表达式并返回结果假如你要根据你每月的消费情况统计每个月的平均花费，你已经统计好了每个月的消费金额，刚好你计算机上的计算器无法使用，让室友帮你，结果他只给了你一个计算的字符串。编不下去了，直接开始 1234567891011a = 100b = 200s = '(a + b) / 2 ' c = eval(s)print(c)print(type(c))150.0&lt;class 'float'&gt; chr 和 ord12345678910111213141516&gt;&gt;&gt; ord('a')97&gt;&gt;&gt; ord('b')98&gt;&gt;&gt; ord('A')65&gt;&gt;&gt; ord('B')66&gt;&gt;&gt; chr(97)'a'&gt;&gt;&gt; chr(98)'b'&gt;&gt;&gt; chr(65)'A'&gt;&gt;&gt; chr(66)'B' 发现规律了吗，这两个操作可以互相转换。 以后你可能会遇到程序提示：按 q 键退出，或者按 s 键保存，可以试试看这两个字母是什么数字编码。 hex ，oct 和 bin1234567&gt;&gt;&gt; a = 100&gt;&gt;&gt; bin(a)'0b1100100'&gt;&gt;&gt; oct(a)'0o144'&gt;&gt;&gt; hex(a)'0x64' 注意操作后返回的是字符串格式，不再是数字哦 123456&gt;&gt;&gt; int(eval('0b1100100'))100&gt;&gt;&gt; eval('0b100')4&gt;&gt;&gt; type(eval('0b100'))&lt;class 'int'&gt; 这玩意儿写累了，拆开更吧，水一篇。 — 欲知后事是如何，且听下回分解]]></content>
      <categories>
        <category>Python 教程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[6.Python的math模块]]></title>
    <url>%2Fpython%2F6.Python%E7%9A%84math%E6%A8%A1%E5%9D%97.html</url>
    <content type="text"><![CDATA[书接上文这年头，自己造轮子的还是少啊，当你觉得别人的轮子不好用的时候，试试自己造一个，就会反省道：”真香” 我就是饿死，从这里跳下去，也绝不会用 math 模块的 123&gt;&gt;&gt; import math&gt;&gt;&gt; dir(math)['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc'] dir 查看 math 查看包中的内容,每遇到一个新的模块，都可以用来看看，不讲了，懒得讲 Python常用数学函数 函数 返回值 abs(x) 返回数字的绝对值，如abs(-10) 返回 10 ceil(x) 返回数字的上入整数，如math.ceil(4.1) 返回 5 cmp(x,y) 如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。已被删除 exp(x) 返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045 fabs(x) 返回数字的绝对值，如math.fabs(-10) 返回10.0 floor(x) 返回数字的下舍整数，如math.floor(4.9)返回 4 log(x) 如math.log(math.e)返回1.0,math.log(100,10)返回2.0 max(x1,x2,…) 返回给定参数的最大值，参数可以为序列。 min(x1,x2,…) 返回给定参数的最小值，参数可以为序列。 modf(x) 返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。 pow(x,y,z) x**y 运算后的值。 round(x,[n]) 浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。 sqrt(x) 返回数字x的平方根 下面给出部分函数的示例，如果是没有数学基础，第一次看见这些函数，或者想要更多详细的参考，可以参考官方文档 或者，使用帮助命名 help _ :救救我 1234567891011121314151617181920212223242526272829303132333435363738&gt;&gt;&gt; import math&gt;&gt;&gt; help(math)Help on built-in module math:NAME mathDESCRIPTION This module provides access to the mathematical functions defined by the C standard.FUNCTIONS acos(x, /) Return the arc cosine (measured in radians) of x. acosh(x, /) Return the inverse hyperbolic cosine of x. asin(x, /) Return the arc sine (measured in radians) of x. asinh(x, /) Return the inverse hyperbolic sine of x. atan(x, /) Return the arc tangent (measured in radians) of x. atan2(y, x, /) Return the arc tangent (measured in radians) of y/x. Unlike atan(y/x), the signs of both x and y are considered. atanh(x, /) Return the inverse hyperbolic tangent of x. ceil(x, /) Return the ceiling of x as an Integral.# 还有很多 12345678910import mathprint(abs(-10),'\t',math.ceil(1.1),'\t',math.exp(1),'\n', max(1,2),'\t',math.floor(4.5),'\t',math.log(2,4),'\n', pow(2,5,2),'\t',math.sin(math.pi),'\t',math.modf(2.3),'\n', round(4.3334,2),'\t',math.cmp(1,2),'\t',math.cmp(1,1),'\n', math.cmp(2,1),'\t',math.sqrt(4),'\t', )#因为已经移除，会报错AttributeError: module 'math' has no attribute 'cmp' 123456789101112import mathprint(abs(-10),'\t\t',math.ceil(1.1),'\t'*5,math.exp(1),'\n', max(1,2),'\t\t',math.floor(4.5),'\t'*5,math.log(2,4),'\n', pow(2,5,2),'\t\t',math.sin(math.pi),'\t\t',math.modf(2.3),'\n', round(4.3334,2),'\t\t',math.sqrt(4),'\t\t', )10 2 2.718281828459045 2 4 0.5 0 1.2246467991473532e-16 (0.2999999999999998, 2.0) 4.33 2.0 那我们想要比较两个值的时候怎么办呢？ 12345&gt;&gt;&gt; import operator&gt;&gt;&gt; operator.eq('a','b')False&gt;&gt;&gt; operator.eq('a','a')True 需要导入 operator 模块 并且提供了以下内置函数： 123456789101112operator.lt(a, b) operator.le(a, b) operator.eq(a, b) operator.ne(a, b) operator.ge(a, b) operator.gt(a, b) operator.__lt__(a, b) operator.__le__(a, b) operator.__eq__(a, b) operator.__ne__(a, b) operator.__ge__(a, b) operator.__gt__(a, b) math 模块暂时结束探讨，其实我自己使用感觉不是太多，通常用的还是自带的函数，尤其很多数据分析包都有自己的数学模块，不过看 math 包的源码倒是对编程思维的锻炼大有裨益。有时间一起看看咯。 — 欲知后事是如何，且听下回分解]]></content>
      <categories>
        <category>Python 教程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[如何调用 OpenCV 读取摄像头图片保存在本地]]></title>
    <url>%2Freading%2FOpenCV%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4%E6%8B%8D%E7%85%A7.html</url>
    <content type="text"><![CDATA[如何调用 OpenCV 读取摄像头图片保存在本地1.导入OenCV 库1import cv212print(cv2.__version__) #版本的重要性不言而喻4.1.02.创建一个 VideoCapture 对象1cap = cv2.VideoCapture(0) #如果你有其他摄像头，注意换参数 3.递增，用来保存文件名1num = 0 4.主程序12345678910111213141516171819while(cap.isOpened()):#循环读取每一帧 ret_flag, Vshow = cap.read() #返回两个参数，第一个是bool是否正常打开，第二个是照片数组， #如果只设置一个则变成一个tumple包含bool和图片 cv2.imshow("Capture_Test",Vshow) #窗口显示，显示名为 Capture_Test k = cv2.waitKey(1) &amp; 0xFF #每帧数据延时 1ms，延时不能为 0，否则读取的结果会是静态帧 if k == ord('s'): #若检测到按键 ‘s’，打印字符串 ''' 下面的存储路径改为你自己的文件路径，尽量不要有中文，num是上面的递增，保证新图片不会覆盖原图 ''' cv2.imwrite("images/"+ str(num) + ".jpg", Vshow) print(cap.get(3)); #得到长宽 print(cap.get(4)); print("success to save"+str(num)+".jpg") print("-------------------------") num += 1 elif k == ord('q'): #若检测到按键 ‘q’，退出 break 5.完整代码1234567891011121314151617181920import cv2cap = cv2.VideoCapture(0)num = 0while(cap.isOpened()):#循环读取每一帧 ret_flag, Vshow = cap.read() cv2.imshow("Capture_Test",Vshow) k = cv2.waitKey(1) &amp; 0xFF if k == ord('s'): ''' 下面的存储路径改为你自己的文件路径，尽量不要有中文，num是上面的递增，保证新图片不会覆盖原图 ''' cv2.imwrite("images/"+ str(num) + ".jpg", Vshow) print(cap.get(3)); print(cap.get(4)); print("success to save"+str(num)+".jpg") print("-------------------------") num += 1 elif k == ord('q'): break 6.效果展示]]></content>
      <categories>
        <category>一些笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[3.Python基础语法]]></title>
    <url>%2Fpython%2F3.Python%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html</url>
    <content type="text"><![CDATA[书接上文如果能够顺利地正确打印佛祖的的话，说明你是非常具有编程天赋的人。接下来，我们开始学习 Python 的基础语法，程序为了认识哪些单词是解释器自己的，哪些是程序员写的，规定了一些条条框框来限制大家不要瞎写。哪些是合法的命名规范呢？Python标识符在 Python 里，标识符由字母、数字、下划线组成。 在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。 Python 中的标识符是区分大小写的。 以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。 以双下划线开头的 __foo 代表类的私有成员，以双下划线开头和结尾的 foo 代表 Python 里特殊方法专用的标识，如 init() 代表类的构造函数。 Python 可以同一行显示多条语句，方法是用分号 ; 分开，如： 123&gt;&gt;&gt; print('hello') ; print('world')helloworld 如果你学过其他语言，这个分号你一定很熟悉，很多语言都是用它作为语句的结束符，但是Python更加推荐用标准的代码缩进的方式来写程序。要注意空格和TAB键可是不能混用的，否则光凭肉眼可是很难发现问题所在。 行和缩进学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。 缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。如下所示： 1234if True: print("True")else: print("False") # 缩进不正确，同样等级的 print 你凭什么比上面的要高，是吧 12345$ python test.py File "test.py", line 10 print("False") ^IndentationError: unindent does not match any outer indentation level 错误提示显而易见呢，不但指出了行数，还指出了错误类型，不要忽略这些错误信息，不会的单词就去查，为了以后写BUG 改 BUG 快一点，不能偷懒 当然，光是正确书写标识符还不够，还要记得，程序都会带一群保留字符，这些都是程序的主料，总有一天你会挨个尝个遍，我们已经学了一个 print了，后续的学习之中，会逐步攻破的，不要看他有这么多 Python保留字符下面的列表显示了在Python中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。 所有 Python 的关键字只包含小写字母。 and exec not assert finally or break for pass class from print continue global raise def if return del import try elif in while else is with except lambda yield 那么，一定要记住这些关键字吗？答案是：不用的，你只要使用比较明显表达含义的单词来写程序，一般是很难遇到使用关键字命名的情况，何况我们用自动补全的编辑器，要么高亮要么会有提示，这不是个问题，只是学到一定程度可以来看看，有哪些关键字你没有用到，高级程序员的话，基本上花里胡哨地用这些。加油吧。 多行语句Python语句中一般以新行作为语句的结束符。 但是我们可以使用斜杠（ \）将一行的语句分为多行显示，如下所示： 123total = item_one + \ item_two + \ item_three 后续的学习中，但凡是带括号的，[],{},(),直接换行也是可以的 Python引号Python 可以使用引号( ‘ )、双引号( “ )、三引号( ‘’’ 或 “”” ) 来表示字符串，引号的开始与结束必须的相同类型的。 其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。 如果你的输出语句中带有多种引号，就挨个找成对的吧，对对碰一样，如果有单身的，那就有问题，或者他们就近组队了，后面乱了套，也会出问题 Python注释python中单行注释采用 # 开头。 12345678910111213# 第一个注释print("Hello, Python!") # 第二个注释'''第三个多行注释'''"""第四个多行注释""" 多个语句构成代码组123456if expression : suite elif expression : suite else : suite 命令行参数很多程序可以执行一些操作来查看一些基本信息，Python 可以使用 -h 参数查看各参数帮助信息： 123456789$ python -h usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ... Options and arguments (and corresponding environment variables): -c cmd : program passed in as string (terminates option list) -d : debug output from parser (also PYTHONDEBUG=x) -E : ignore environment variables (such as PYTHONPATH) -h : print this help message and exit [ etc. ] — 欲知后事是如何，且听下回分解]]></content>
      <categories>
        <category>Python 教程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[4.Python 的变量类型]]></title>
    <url>%2Fpython%2F4.Python%20%E7%9A%84%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B.html</url>
    <content type="text"><![CDATA[书接上文了解了基本的编程规范，让我们来看看 Python 中的变量类型。变量变量也就是可以变化的值，可以把它比作是一个篮子，里面可以装苹果也可以装梨子。通常来讲，你要清楚你的目的是干什么，买苹果就拿符合苹果大小的篮子，如果你拿着只能装苹果的篮子去买西瓜，一定会跪在摊前认错。反之，拿着本来装西瓜的篮子去买一颗车厘子，实在是浪费了点。这也是为什么几乎所有的程序语言都要求你提前告知你要用什么篮子。 变量赋值Python 中的变量赋值不需要类型声明。 每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。 每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。 等号（=）用来给变量赋值。 等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如： 123456#!/usr/bin/python# -*- coding: UTF-8 -*- counter = 100 # 赋值整型变量miles = 1000.0 # 浮点型name = "John" # 字符串 多个变量赋值1a = b = c = 1 # 这个操作在你需要创建几个空列表或者计数器时候非常好用 1a, b, c = 1, 2, "john" 上面这个例子其实是属于元组的解包操作，省略了圆括号，通常你如果看到类似这样的语句可以认为它是下面这样的 1a, b, c = (1, 2, "john") # 元组我们后面再讲 标准数据类型Python有五个标准的数据类型： Numbers（数字） String（字符串） List（列表） Tuple（元组） Dictionary（字典） 这5种基本的数据类型贯穿了你的整个Python编程生涯，所以务必要掌握它，基础操作还是要扎实才行 Python支持三种不同的数字类型： int（有符号整型） float（浮点型） complex（复数） 常用的 int 和 float ，也就是常说的整数和小数，现在的小朋友学习的时候教材已经将小数改为了浮点数 Python字符串字符串或串(String)是由数字、字母、下划线组成的一串字符。例如： 12345678910111213141516171819s = 'a_1_c''''如果你只想要字符串中的某一个，就要使用索引，索引就像班里的学号一样，只不过这里从0开始数所以：a_1_c正向索引a --- 0_ --- 11 --- 2_ --- 3c --- 4反向索引a --- -5_ --- -41 --- -3_ --- -2c --- -1''' 如果你想要某一部分，可以使用切片操作： 1s[0:2] # 'a_' 后面会详细介绍，这里只需要记住，取多少个字符，用切片尾数减去首位数就可以了，切片操作是取不到2的，这个区间在数学上算是左开右闭，[…) Python列表列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。 列表用 [ ] 标识，是 python 最通用的复合数据类型。 列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。 Python 元组元组是另一个数据类型，类似于 List（列表）。 元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。 元组的精髓现在还无法体会，初学觉得它很废，它能做到的列表都能，直到天荒地老才知道元组最可贵 Python 字典字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。 两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。 字典用”{ }”标识。字典由索引(key)和它对应的值value组成。 1234567891011121314#!/usr/bin/python# -*- coding: UTF-8 -*- dict = &#123;&#125;dict['one'] = "This is one"dict[2] = "This is two" tinydict = &#123;'name': 'john','code':6734, 'dept': 'sales'&#125; print dict['one'] # 输出键为'one' 的值print dict[2] # 输出键为 2 的值print tinydict # 输出完整的字典print tinydict.keys() # 输出所有键print tinydict.values() # 输出所有值 字典提前说一下，因为它是无序的，当然不能够以之前的学号索引来取值，键你可以认为是你的名字，值就是你这个真真正正的人，别以为没有学号就找不到你了，凭你的名字也是可以找到你的，说到这里，你能感受到字典和列表的各种优缺点吗？比方说，一个考场，大家都按照顺序坐，阅卷的时候按照顺序打分真的方便，但是要是中间缺个两个，就麻烦了。字典好比老师手里攥着带你名字无形的线，随时可以顺着线找到你，海贼王有一个七武海就是这样 Python数据类型转换有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。 [int(x ,base]) 将x转换为一个整数 long(x [,base] ) 将x转换为一个长整数 float(x) 将x转换到一个浮点数 complex(real [,imag]) 创建一个复数 str(x) 将对象 x 转换为字符串 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s) 将序列 s 转换为一个元组 list(s) 将序列 s 转换为一个列表 set(s) 转换为可变集合 dict(d) 创建一个字典。d 必须是一个序列 (key,value)元组。 frozenset(s) 转换为不可变集合 chr(x) 将一个整数转换为一个字符 unichr(x) 将一个整数转换为Unicode字符 ord(x) 将一个字符转换为它的整数值 hex(x) 将一个整数转换为一个十六进制字符串 oct(x) 将一个整数转换为一个八进制字符串 这个是真的挺方便的，不像其他语言，比如：str2int 这种骚操作，又难记又不好看，以后看到2要当成to ，O2O，P2P知道不，谐音命名法也是很骚的操作，以后可以用 guluguluwater 命名温泉 到这里为止都是简单介绍，从下一节开始可要动真格的了。相比于其他教程，接下来的内容重在深挖本质，这也是我为什么写这篇教程的原因，当初随便学学，基础不扎实，导致现在还要回炉。都是泪。 — 欲知后事是如何，且听下回分解]]></content>
      <categories>
        <category>Python 教程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2.安装 Anaconda]]></title>
    <url>%2Fpython%2F2.%E5%AE%89%E8%A3%85%20Anaconda.html</url>
    <content type="text"><![CDATA[书接上文上回书说到，Python的应用领域广泛，大家伙也有兴趣和我一起从头开始学习 Python ，那么怎么编写第一个 Python程序呢？不用说，我们需要一个可以编写 Python 代码的程序来帮助我们更快地入门。我推荐 Anaconda 这个集成环境来学习，就像你安装游戏一样双击就能安装，并且还会为我们下载很多常用的第三方库，这样我们就不用自己下载安装了。 PS:不要以为安装这个事情很简单，迟早会有自己安装第三方库因为版本问题捶胸顿足的时候 下载链接：https://www.anaconda.com/distribution/#download-section 选择合适自己的下载安装吧 在“开始”菜单中“Anaconda3”文件下找到“Jupyter Notebook”，点击进入: 选择 Python3，新建一个 Python 代码笔记本 修改文件名称，点击 untitled2 进行修改 点击进入代码编辑块，编辑：print(‘Hello World’)，Ctrl + Enter 进行运行 如果能够正常输出，那么说明安装成功了，并且你已经学会了 Python 的第一个程序，这将是你迈入编程世界最重要的一步 程序界有一个诅咒：如果你学习一门新的编程语言，不打印 Hello World ，那么你将学不会这门语言。 作业： 使用Jupyter Notebook打印： 世界，您好！ 您好，世界！ 打印佛祖： 123456789101112131415161718192021222324252627282930 1 * 2 * _ooOoo_ 3 * o8888888o 4 * 88" . "88 5 * (| -_- |) 6 * O\ = /O 7 * ____/`---'\____ 8 * .' \\| |// `. 9 * / \\||| : |||// \10 * / _||||| -:- |||||- \11 * | | \\\ - /// | |12 * | \_| ''\---/'' | |13 * \ .-\__ `-` ___/-. /14 * ___`. .' /--.--\ `. . __15 * ."" '&lt; `.___\_&lt;|&gt;_/___.' &gt;'"".16 * | | : `- \`.;`\ _ /`;.`/ - ` : | |17 * \ \ `-. \_ __\ /__ _/ .-` / /18 * ======`-.____`-.___\_____/___.-`____.-'======19 * `=---='20 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^21 * 佛祖保佑 永无BUG22 * 佛曰:23 * 写字楼里写字间，写字间里程序员；24 * 程序人员写程序，又拿程序换酒钱。25 * 酒醒只在网上坐，酒醉还来网下眠；26 * 酒醉酒醒日复日，网上网下年复年。27 * 但愿老死电脑间，不愿鞠躬老板前；28 * 奔驰宝马贵者趣，公交自行程序员。29 * 别人笑我忒疯癫，我笑自己命太贱；30 * 不见满街漂亮妹，哪个归得程序员？ 当我们虔诚地问候了这个世界之后，就可以开始我们的编程之旅了，佛祖保佑，永无BUG — 欲知后事是如何，且听下回分解]]></content>
      <categories>
        <category>Python 教程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.Python 介绍]]></title>
    <url>%2Fpython%2F1.Python%20%E4%BB%8B%E7%BB%8D.html</url>
    <content type="text"><![CDATA[Python 来了Python（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/）是一种广泛使用的解释型、高级编程、通用型编程语言，由吉多·范罗苏姆创造，第一版发布于1991年。背景Python的创始人为吉多·范罗苏姆。1989年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。之所以选中Python作为程序的名字，是因为他是BBC电视剧——蒙提·派森的飞行马戏团的爱好者。 特性与设计哲学Python是完全面向对象的语言。函数、模块、数字、字符串都是对象。并且完全支持继承、重载、派生、多重继承，有益于增强源代码的复用性。 标准库为了代码的重用性，Python 在设计之初就包含了许多好用的库函数，避免重复造轮子。所以对于标准库的掌握是Python开发者必备技能。 我们可以看看标准库包含哪些功能呢？ Python标准库的主要功能有： 文本处理，包含文本格式化、正则表达式匹配、文本差异计算与合并、Unicode支持，二进制数据处理等功能 文件处理，包含文件操作、创建临时文件、文件压缩与归档、操作配置文件等功能 操作系统功能，包含线程与进程支持、IO复用、日期与时间处理、调用系统函数、日志（logging）等功能 网络通信，包含网络套接字，SSL加密通信、异步网络通信等功能 网络协议，支持HTTP，FTP，SMTP，POP，IMAP，NNTP，XMLRPC等多种网络协议，并提供了编写网络服务器的框架 W3C格式支持，包含HTML，SGML，XML的处理。 其它功能，包括国际化支持、数学运算、HASH、Tkinter等 想要详细了解 Python 的标准库？ 请访问官方标准库文档：https://docs.python.org/3/library/index.html 如果你是初学者，上面的库功能可能难以理解，是的，标准库就是安装 Python 自带的内置电池，也算是比较底层的东西。接下来，让我们不妨再看看 Python 的第三方库吧： 著名的第三方库：Web框架[编辑] Django 开源Web开发框架，它鼓励快速开发,并遵循MVC设计，开发周期短。 Flask 轻量级的Web框架。 Pyramid 轻量，同时有可以规模化的Web框架，Pylon projects 的一部分。 ActiveGrid 企业级的Web2.0解决方案。 Karrigell 简单的Web框架，自身包含了Web服务，py脚本引擎和纯python的数据库PyDBLite。 Tornado 一个轻量级的Web框架，内置非阻塞式服务器，而且速度相当快 webpy 一个小巧灵活的Web框架，虽然简单但是功能强大。 CherryPy 基于Python的Web应用程序开发框架。 Pylons 基于Python的一个极其高效和可靠的Web开发框架。 Zope 开源的Web应用服务器。 TurboGears 基于Python的MVC风格的Web应用程序框架。 Twisted 流行的网络编程库，大型Web框架。 Quixote Web开发框架。 aiohttp 轻量级的Web框架，采用的是Python3的asyncio异步特性。 科学计算[编辑] Matplotlib 用Python实现的类matlab的第三方库，用以绘制一些高质量的数学二维图形。 Pandas 用于数据分析、数据建模、数据可视化的第三方库。 SciPy 基于Python的matlab实现，旨在实现matlab的所有功能。 NumPy 基于Python的科学计算第三方库，提供了矩阵，线性代数，傅立叶变换等等的解决方案。 GUI[编辑] PyGtk 基于Python的GUI程序开发GTK+库。 PyQt 用于Python的QT开发库。 WxPython Python下的GUI编程框架，与MFC的架构相似。 其它[编辑] BeautifulSoup 基于Python的HTML/XML解析器，简单易用。 gevent python的一个高性能并发框架,使用了epoll事件监听、协程等机制将异步调用封装为同步调用。 PIL 基于Python的图像处理库，功能强大，对图形文件的格式支持广泛。当前已无维护，另一个第三方库Pillow实现了对PIL库的支持和维护。 PyGame 基于Python的多媒体开发和游戏软件开发模块。 Py2exe 将python脚本转换为windows上可以独立运行的可执行程序。 Requests 适合于人类使用的HTTP库，封装了许多繁琐的HTTP功能，极大地简化了HTTP请求所需要的代码量。 scikit-learn 机器学习第三方库，实现许多知名的机器学习算法。 TensorFlow Google开发维护的开源机器学习库。 Keras 基于TensorFlow，Theano与CNTK的高端神经网络API。 SQLAlchemy 关系型数据库的对象关系映射(ORM)工具 利用上面这些著名的第三方库，可以完成下面的方向。有你感兴趣的领域吗？ 1. WEB开发 2. 网络编程 3. 爬虫开发 4. 云计算开发 5. 人工智能 6. 自动化运维 7. 金融分析 8. 科学运算 9. 游戏开发 10. 桌面软件 如果你对下面的某一个或几个方向感兴趣，不妨试试 Python 吧，我将会和你一起从零开始学习这些，并且在每一个细分领域从实战出发进行学习，每一篇博客布置相应内容的习题帮助巩固，最后完结的时候，让我们共同攻克一个较为完整的项目。 文章参考： 参考文献 细则 维基百科 python python 官网 https://docs.python.org/3/library/index.html Python 作为一门编程语言，应用广泛。曾经有个伟人说过： 吾生也有涯，而知也无涯。以有涯随无涯，殆已！ 就是说这么多东西，等我学完，早挂掉了。莫非是劝我们弃疗？如何用有限的生命解锁 Python 技能呢？ —欲知后事如何，且听下回分解]]></content>
      <categories>
        <category>Python 教程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2.安装 Anaconda]]></title>
    <url>%2Fhomework%2FHello%20World.html</url>
    <content type="text"><![CDATA[12print('世界，您好！')print('您好，世界！') 世界，您好！ 您好，世界！12345678910111213141516171819202122232425262728 _ooOoo_ o8888888o 88" . "88 (| -_- |) O\ = /O ____/`---'\____ .' \\| |// `. / \\||| : |||// \ / _||||| -:- |||||- \ | | \\\ - /// | | | \_| ''\---/'' | | \ .-\__ `-` ___/-. / ___`. .' /--.--\ `. . __ ."" '&lt; `.___\_&lt;|&gt;_/___.' &gt;'"". | | : `- \`.;`\ _ /`;.`/ - ` : | | \ \ `-. \_ __\ /__ _/ .-` / /======`-.____`-.___\_____/___.-`____.-'====== `=---='^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 佛祖保佑 永无BUG 佛曰: 写字楼里写字间，写字间里程序员； 程序人员写程序，又拿程序换酒钱。 酒醒只在网上坐，酒醉还来网下眠； 酒醉酒醒日复日，网上网下年复年。 但愿老死电脑间，不愿鞠躬老板前； 奔驰宝马贵者趣，公交自行程序员。 别人笑我忒疯癫，我笑自己命太贱； 不见满街漂亮妹，哪个归得程序员？]]></content>
      <categories>
        <category>作业</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world.html</url>
    <content type="text"><![CDATA[第一篇博客就像程序员每学习一门新的编程语言的时候，首先输出：Hello World 一样，这篇博客也是我创建自己博客所迈出的第一步。为什么想起写博客在学习工作的过程中，从大家的博客中获益匪浅，也希望自己能够将学到的知识记录下来，分享出去。既可以给自己留下一点复习参考的笔记，又可以服务大家，能够有意或者无意帮助到别人，也算是赠人玫瑰，手留余香的快乐吧。 主要记录些什么作为自己的个人博客，我希望可以记录得随意一些。学习到的新知识，搜索记录的笔记，个人的人生感悟，生活中的一些琐碎，还有杂七杂八的兴趣吧 自己的一方天地生活中零零碎碎的事情，千丝万缕的关系，很难衷心地说出自己的想法，自己的思考。比起朋友圈，这里有更加独立的空间。虽然是公开博客，躲在这互联网的汪洋大海之中，谁也找不到，反而更能够沉下心来记录，感悟。]]></content>
  </entry>
</search>
